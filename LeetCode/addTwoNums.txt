/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int length1 = 0,length2 = 0;
        ListNode L1,L2;
        L1 = l1; L2 = l2;
        while (L1 != null){
            length1++;
            L1 = L1.next;
        }
        while (L2 != null){
            length2++;
            L2 = L2.next;
        }
        int[] nums1 = new int[length1];
        int[] nums2 = new int[length2];
        L1 = l1; L2 = l2;
        int j = 0;

        while (L1 != null){
            nums1[j] = L1.val;
            L1 = L1.next;
            j++;
        }
        j = 0;
        while (L2 != null){
            nums2[j] = L2.val;
            L2 = L2.next;
            j++;
        }
        int length = length1 > length2? length1:length2;
        int slength = length1 > length2? length2:length1;
        int flag = 0, n1 = 0, n2 = 0,sum = 0;
        ListNode node = new ListNode(0);
        ListNode head = new ListNode(0);

       for(int i = 0; i < length ; i++){
            if (i < slength){
                n1 = nums1[i] + nums2[i];
            }else {
                n1 = length1 > length2? nums1[i]:nums2[i];
            }
            if (flag == 1){
                n1++;
            }
            flag = 0;
            if (n1 > 10||n1 == 10) {
                flag = 1;
                n1 -= 10;
            }
            if (i == 0) {
                node = new ListNode(n1);
                head = node;
            }else{
                node.next = new ListNode(n1);
                node = node.next;
            }

            if((i==length-1)&&flag==1){
                node.next = new ListNode(1);
            }
           
        }
        return head;
    }
}